name: Bump version

on:
  push:
    branches:
      - dev

env:
  USER_EMAIL: cwkim@deepx.ai
  USER_NAME: cwkimDO

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  bump-dev-version:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' && !contains(github.event.head_commit.message, 'ci-skip') && !contains(github.event.head_commit.message, 'bump-skip')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install tools
        run: |
          pip install bump2version

      - name: Set git config
        run: |
          git config --global user.email $USER_EMAIL
          git config --global user.name $USER_NAME

      - name: Extract PR number from commit message
        id: pr_info
        run: |
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          if [[ "$COMMIT_MESSAGE" =~ \#([0-9]+) ]]; then
            PR_NUMBER="${BASH_REMATCH[1]}"
            PR_URL="https://github.com/${GITHUB_REPOSITORY}/pull/${PR_NUMBER}"
          else
            PR_NUMBER=""
            PR_URL=""
          fi
          echo "PR_URL=$PR_URL" >> $GITHUB_ENV

      - name: Get version
        run: |
          VERSION=$(grep 'current_version =' .bumpversion.cfg | cut -d ' ' -f 3)
          echo "CURRENT_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Get Next Version
        id: semver
        uses: ietf-tools/semver-action@v1
        with:
          token: ${{ github.token }}
          branch: dev
          majorList: break
          minorList: feat
          patchList: fix, perf, refactor

      - name: Bump version
        id: version_info
        run: |
          NEW_VERSION=$(al ${{ steps.semver.outputs.bump }} --no-commit --no-tag --list | grep new_version | sed -r 's/new_version=(.*)/\1/')
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEW_VERSION_TAG=v$NEW_VERSION" >> $GITHUB_ENV
          git tag v$NEW_VERSION

      - name: Generate RELEASE_NOTES.md
        uses: orhun/git-cliff-action@v3.0.2
        id: git-cliff
        with:
          config: '.cliff.toml'
          args: --verbose
        env:
          OUTPUT: RELEASE_NOTES.md

      - name: Print the changelog
        run: cat "${{ steps.git-cliff.outputs.changelog }}"

      - name: Commit changes
        run: |
          git add .
          git commit -m "Bump version: $CURRENT_VERSION to $NEW_VERSION"
          git push
          git tag -d v$NEW_VERSION
          git tag -a v$NEW_VERSION -m "$PR_URL"
          git push origin $NEW_VERSION_TAG
