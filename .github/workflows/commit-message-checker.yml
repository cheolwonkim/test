name: Convention Checker

on:
  pull_request:
    # synchronize: pr head branch was updated
    # edited: pr title or body was editied, or base branch of pr was changed.
    types: [opened, reopened, synchronize, edited]
env:
    PR_TITLE: ${{ github.event.pull_request.title }}
    COMMIT_MESSAGE_PATTERN: ${{ vars.COMMIT_MESSAGE_PATTERN }}
    RELEASE_PATTERN: ${{ vars.RELEASE_PATTERN }}

jobs:
  PR-Title:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: PR title check
        run: |
          echo "Checking PR Title: ${{ env.PR_TITLE }}"
          echo "COMMIT_MESSAGE_PATTERN: ${{ env.COMMIT_MESSAGE_PATTERN }}"

          if echo "${{ env.PR_TITLE }}" | grep -Pq "${{ env.COMMIT_MESSAGE_PATTERN }}"; then
            echo "matches commit message format."
          elif echo "${{ env.PR_TITLE }}" | grep -Pq "${{ env.RELEASE_PATTERN }}"; then
            echo "matches release format."
          else
            echo "does not match any required format."
            exit 1
          fi

  Commit-Message:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Commit message check
        run: |
          echo "Fetching PR commits..."
          PR_COMMITS_URL=${{ github.event.pull_request.commits_url }}
          echo "Commits URL: $PR_COMMITS_URL"
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $PR_COMMITS_URL > commits.json
          jq -r '.[].commit.message' commits.json | while read commit_message; do
            echo "Checking commit message: $commit_message"
            if ! echo "$commit_message" | grep -Pq "${{ env.COMMIT_MESSAGE_PATTERN }}"; then
              echo "Commit message does not match the required format."
              echo "$commit_message"
              exit 1
            fi
          done
          echo "All commit messages match the required format."
