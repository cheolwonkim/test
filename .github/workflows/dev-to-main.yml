name: dev-to-main
run-name: ${{github.triggering_actor}} - Rebase dev(${{github.event.inputs.target_commit}}) â†’ main

on:
    workflow_dispatch:
        inputs:
            target_commit:
                description: 'Target commit to rebase dev to main'
                required: true
            push_force:
              type: boolean
              description: "Should commit rebased by force?"
              default: false
            tag_force:
                type: boolean
                description: 'Should tag generated by force?'
                default: false

permissions: write-all

jobs:
    check:
      name: check
      runs-on: ubuntu-latest
      timeout-minutes: 5
      steps:
        - name: clean
          run: |
            sudo rm -rf ${{ github.workspace }}
            mkdir -p ${{ github.workspace }}

        - name: checkout
          uses: actions/checkout@v4
          with:
            fetch-depth: 0
            token: ${{ secrets.GH_TOKEN }}
            ref: main

        - name: Check branch & head
          run: git branch -avv

        - name: Check commit exists on dev
          run: |
            BRANCH_LIST=$(git branch -r --contains ${{github.event.inputs.target_commit}})
            echo "Existing branches : ${BRANCH_LIST}"
            if echo "${BRANCH_LIST}" | grep -q dev; then
              echo "COMMIT_EXISTS=true" >> $GITHUB_ENV
            else
              echo "COMMIT_EXISTS=false" >> $GITHUB_ENV
            fi

        - name: Stop
          if: env.COMMIT_EXISTS == 'false'
          uses: actions/github-script@v7
          with:
            script: core.setFailed("${{github.event.inputs.target_commit}} does not exists on dev")

    rebase:
        name: rebase
        needs: check
        if: needs.check.result == 'success'
        runs-on: ubuntu-latest
        timeout-minutes: 5
        steps:
          - name: Rebase target commit to main
            run: git rebase ${{ github.event.inputs.target_commit }}

          - name: Push main
            if: ${{ github.event.inputs.push_force == 'false' }}
            uses: ad-m/github-push-action@master
            with:
              github_token: ${{ secrets.GH_TOKEN }}
              branch: main

          - name: Push main forceably
            if: ${{ github.event.inputs.push_force == 'true' }}
            uses: ad-m/github-push-action@master
            with:
              github_token: ${{ secrets.GH_TOKEN }}
              branch: main
              force: true

    # tag:
    #   name: tag
    #   needs: rebase
    #   if: needs.rebase.result == 'success'
    #   runs-on: ubuntu-latest
    #   timeout-minutes: 5
    #   steps:
    #     - name: (Temp) Get current version
    #       run: echo "CURRENT_VERSION=$(grep 'current_version' .bumpversion.cfg | cut -d ' ' -f3)" >> $GITHUB_ENV

    #     - name: (Temp) Check version
    #       run: echo "${{ env.CURRENT_VERSION }}"

    #     - name: (Temp) Create tag
    #       if: ${{ github.event.inputs.tag_force == 'false' }}
    #       uses: rickstaa/action-create-tag@v1
    #       with:
    #         tag_exists_error: true
    #         force_push_tag: false
    #         tag: ${{ env.CURRENT_VERSION }}
    #         commit_sha: ${{ github.event.inputs.target_commit }}

    #     - name: (Temp) Create tag forceably
    #       if: ${{ github.event.inputs.tag_force == 'true' }}
    #       uses: rickstaa/action-create-tag@v1
    #       with:
    #         tag_exists_error: false
    #         force_push_tag: true
    #         tag: ${{ env.CURRENT_VERSION }}
    #         commit_sha: ${{ github.event.inputs.target_commit }}

    # release:
    #   name: release
    #   needs: tag
    #   if: needs.tag.result == 'success'
    #   runs-on: ubuntu-latest
    #   timeout-minutes: 5
    #   steps:
    #     - name: Get from tag
    #       run: echo "FROM_TAG=$(git tag --sort=-v:refname | sed -n '1p')" >> $GITHUB_ENV

    #     - name: Get to tag
    #       run: echo "TO_TAG=$(git describe --abbrev=0 --tags)" >> $GITHUB_ENV

    #     - name: Build change log
    #       id: build_change_log
    #       uses: mikepenz/release-changelog-builder-action@v4
    #       with:
    #         token: ${{ secrets.GH_TOKEN }}
    #         fromTag: ${{ env.FROM_TAG }}
    #         toTag: ${{ env.TO_TAG }}

    #     - name: Create release
    #       uses: ncipollo/release-action@v1
    #       with:
    #           tag: ${{ env.TO_TAG }}
    #           body: ${{steps.build_change_log.outputs.changelog}}
    #           generateReleaseNotes : true
    #           allowUpdates: true
    #           makeLatest: true

