
[tool.commitizen]
name = "cz_customize"
bump_pattern = "^(break|fix|feat|Fix|Feat|Hotfix)"
bump_message = "Bump version: $current_version to $new_version"
bump_map = {"break" = "MAJOR", "Feat" = "MINOR", "feat" = "MINOR", "Fix" = "PATCH", "fix" = "PATCH"}
tag_format = "v$major.$minor.$patch$prerelease"
version = "0.2.3"
version_scheme = "semver"
update_changelog_on_bump = true
major_version_zero = false


[tool.commitizen.customize]
example = "fix(README.md): bug fix"
message_template = "{{ type }}{% if changed_scope %}({{ changed_scope }}){% endif %}: {{ message }}"
schema_pattern = '''(?P<change_type>fix|feat|docs|style|refactor|break|test|build|ci|Bump version)(\((?P<scope>.+?)\))?: (?P<message>.*)'''

[[tool.commitizen.customize.questions]]
type = "list"
name = "type"
choices = [
        {name = "fix: A bug fix. Correlates with PATCH in SemVer", value = "fix"},
        {name = "feat: A new feature or function. Correlates with MINOR in SemVer", value = "feat"},
        {name = "docs: Documentation only changes", value = "docs"},
        {name = "style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)", value = "style"},
        {name = "refactor: A code change that neither fixes a bug nor adds a feature", value = "refactor"},
        {name = "break: breaking changes. Correlates with Major in SemVer", value = "break"},
        {name = "test: Adding missing or correcting existing tests", value = "test"},
        {name = "build: Changes that affect the build system or external dependencies (example scopes: pip, docker, npm)", value = "build"}
]
message = "Select the type of change you are committing"


[[tool.commitizen.customize.questions]]
type    = "input"
name    = "changed_scope"
message = "What is the scope of this change? (class or file name): (press [enter] to skip)"



[[tool.commitizen.customize.questions]]
type    = "input"
name    = "message"
message = "Write the message body"
